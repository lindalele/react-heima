组件选择：
有状态用类组件，没有状态用函数组件。
有了 hook之后，就用函数组件，如果需要状态，函数组件也能提供状态了，使用hook来 提供状态。

函数组件没有生命周期，但是可以使用hook来模拟生命周期
hooks是react16.8新增的特性hooks只能在函数组件中使用，为函数组件提供状态和生命、周期等原来类组件中提供的功能

react16以前class组件提供状态+函数组件展示内容
react16以后
1.函数组件提供状态+函数组件展示内容
2.Hooks提供状态+函数组件展示内容 

class组件自身的问题：
1.class组件需要理解this的指向
函数组件不需要this的指向
2.类组件的生命周期函数名称不能变，不能在打包的时候压缩，只能是componentDidMount等;webpack的tree-shaking会去除没有使用的代码，但是class组件的生命周期函数不能去除，即使里面没有写代码；
3.类组件一个功能被拆到了不同的组件中去，各个组件有生命周期，不利于维护

useState:使用场景：想在函数组件中，使用组件状态时，可以使用useState
作用：在函数组件中，提供状态state

// 使用：首先调用一下useState传入一个值

useEffect:使用场景：想在函数组件中，使用生命周期函数时，可以使用useEffect
副作用：如果一个函数或其他操作修改了其局部环境之外的状态变量值，呢么他就被称为副作用
函数组件副作用：函数组件主要作用是根据数据渲染UI结构；组件副作用：发送请求、操作DOM、localStorage定时器等

副作用的代码不能直接写在export default函数中，因为函数组件每次渲染都会执行，如果副作用写在函数组件中，副作用代码也会每次渲染都执行(副作用代码不是每次都要执行的，比如发送请求，有的时候只发一次就行)写函数里面就变成数据一变化，ajax也执行一次了。，所以需要把副作用代码放到函数组件之外，提供了一个useEffect函数，把副作用代码放到useEffect函数中，这样副作用代码就不会每次渲染都执行了

useEffect useState只能在函数组件export default function Move中和在自定义hooks里面使用，不能在普通函数中使用

自定义hooks：命名规范：以useXxx开头；必须驼峰命名
使用场景：在函数组件中，封装一些逻辑，供其他函数组件使用。就是实现复用的时候可以使用自定义hooks

